#+TITLE: Local User Customizations
#+OPTIONS: toc:nil num:nil ^:nil
* Starter Kit 
This is the emacs starter kit for the social sciences, from http://kjhealy.github.com/emacs-starter-kit/ It has been customized for use by Ista Zahn.
** Miscellaneous Settings and starter-kit overrides
*** Recent File Menu
Turn on the recent file menu. 

#+srcname: local-loadpath
#+begin_src emacs-lisp
    ;; recent file menu
    (require 'recentf)
    (recentf-mode 1)
#+end_src

*** Color Theme and Line Highlighting
The Starter Kit uses Ethan Schoonover's /Solarized/ color theme. You can easily switch between light and dark versions of the theme. Some other useful themes are included in the =src/color-theme-themes/= directory of the kit. 

#+srcname: local-settings
#+begin_src emacs-lisp
  ;; Color Theme from vendor directory
  (require 'color-theme-solarized)
  (load-file "~/.emacs.d/src/color-theme-themes/color-theme-tangosoft.el")
  (if window-system
      (color-theme-solarized 'dark)
    ;; or if you prefer ...
    ;; (color-theme-solarized 'light)
    (color-theme-tangosoft) ;; Emacs started in tty
      )
  
  ;; Define a shortcut to switch between dark and light versions of solarized
  (global-set-key (kbd "C-c l") 'color-theme-solarized)
  
#+end_src

*** Run Emacs in Full Screen
  I find it very useful to run Emacs in full-screen mode. There is no completely satisfactory way to accomplish this on Mac OS X. What  works depends on the flavor of emacs you are using, unfortunately. On linux I just use KDE fullscreen functionality. Choose as appropriate from the following options (all disabled by default):

**** Option 1
Require maxframe package to conveniently maxmimize the window. Doesn't work with Emacs 23 on Mac.

#+srcname: fullscreen-1
#+begin_src emacs-lisp :tangle no
  (require 'maxframe)
  (global-set-key (kbd "C-c m") 'x-maximize-frame)  
#+end_src

**** Option 2
Fullscreen toggle -- Only works with the (now slightly out-of-date)
patched emacs build at =git://github.com/typester/emacs.git=.

#+source: fullscreen-2
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c m") 'ns-toggle-fullscreen)
#+end_src

**** Option 3  
Fullscreen toggle using maxframe.el. 
#+source: fullscreen-3
#+begin_src emacs-lisp :tangle no
  
 (require 'maxframe)
 (defvar my-fullscreen-p t "Check if fullscreen is on or off")
 (defun my-toggle-fullscreen ()
 (interactive)
 (setq my-fullscreen-p (not my-fullscreen-p))
 (if my-fullscreen-p
 (restore-frame)
 (maximize-frame)))
 (global-set-key (kbd "C-c f") 'my-toggle-fullscreen)    
#+end_src

**** Option 4
For use with Yamamoto Mitsuharu's Carbon-patched Emacs 23. (This is
    what I use, but it requires you compile a custom Emacs.)

#+source: fullscreen-4
#+begin_src emacs-lisp :tangle no
    (defun fullscreen (&optional f)
      (interactive)
      (set-frame-parameter f 'fullscreen
                           (if (frame-parameter f 'fullscreen) nil 'fullboth)))
    (global-set-key (kbd "C-c f") 'fullscreen)
    (add-hook 'after-make-frame-functions 'fullscreen)
#+end_src

**** Option 5  
Internal to emacs; also seems not to work on OS X.
#+source: fullscreen-5
#+begin_src emacs-lisp :tangle no
 (defun toggle-fullscreen (&optional f)
    (interactive)
    (let ((current-value (frame-parameter nil 'fullscreen)))
         (set-frame-parameter nil 'fullscreen
                              (if (equal 'fullboth current-value)
                                  (if (boundp 'old-fullscreen) old-fullscreen nil)
                                  (progn (setq old-fullscreen current-value)
                                         'fullboth)))))
  (global-set-key (kbd "C-c f") 'toggle-fullscreen)  
#+end_src

*** Windmove
    Tweak to Windmove setup. Without this, you keep getting elisp
    errors when you try to wrap around.
#+srcname: local-windmove
#+begin_src emacs-lisp
(setq windmove-wrap-around t)
#+end_src

*** Resizing inside the frame
When your frame (i.e., the main Emacs window) is split into different parts (e.g. using =C-x 2= or =C-x 3=) we sometimes want to resize these parts dynamically. This defines =Shift-C-[arrow keys]= so you can do this. 
 
#+srcname: resize-splits
#+begin_src emacs-lisp
  ;; resizing 'windows' (i.e., inside the frame)
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)  
#+end_src

*** Mac Key mode
    Used with Mitsuharu Yamamoto's carbon-patched Emacs, which turns
    off support for default mac bindings. Turned off by default.
#+srcname: mac-keys
#+begin_src emacs-lisp :tangle no
   (setq mac-command-modifier 'alt mac-option-modifier 'meta)
   (require 'redo+)
   (require 'mac-key-mode)
   (mac-key-mode 1)
   (add-hook 'mac-key-mode-hook
       (lambda()
         (interactive)
         (if mac-key-mode
             (setq mac-option-modifier 'meta)
             (setq mac-option-modifier nil)
             )))
#+end_src

*** Copy and paste settings
Use CUA-mode, play nice with X-window clipboard

#+srcname: cua-keys-clipboard
#+begin_src emacs-lisp
  (setq cua-enable-cua-keys t)
  (setq yank-pop-change-selection t)
  (setq x-select-enable-clipboard t)
#+end_src

*** Speedbar
Use speedbar for quick access to files and file information. Enable
sr-speedbar for a more convenient interface. Note that sr-speedbar is
not in ELPA. See http://www.emacswiki.org/emacs/SrSpeedbar for
information and download instructions.

#+srcname: configure-speedbar
#+begin_src emacs-lisp
  (require 'sr-speedbar)
  
  (setq speedbar-supported-extension-expressions (quote (".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".js" ".f\\(90\\|77\\|or\\)?" ".ada" ".p[lm]" ".tcl" ".m" ".scm" ".pm" ".py" ".g" ".s?html" ".ma?k" "[Mm]akefile\\(\\.in\\)?" ".R" ".Rnw")))
  (setq speedbar-use-imenu-flag t)
  (setq sr-speedbar-right-side nil)
  (setq sr-speedbar-width-console 34)
  (setq sr-speedbar-width-x 34)
#+end_src

*** autopair and paredit
Some people like autopair / paredit, but I (Ista) hate it. My version of the
starter kit disables both. If you want them back, turn on this section by
deleting =:tangle no= at the end of the =begin_src= line.
#+srcname: autopair-paredit-settings
#+begin_src emacs-lisp :tangle no
;; paredit
(add-hook 'lisp-mode-hook 'turn-on-paredit)
(add-hook 'clojure-mode-hook 'turn-on-paredit)
(add-hook 'emacs-lisp-mode-hook 'turn-on-paredit)
(add-hook 'espresso-mode-hook 'turn-on-paredit)
;; autopair
(autopair-global-mode)
#+end_src

*** Automatic R function yasnippets
Use r-auto-yas to automatically generate yasnippets for R functions in
ess mode. Not in ELPA, see
http://www.svenhartenstein.de/Software/R-autoyas and
http://www.emacswiki.org/emacs/r-autoyas.el

#+srcname: configure-r-auto-yas
#+begin_src emacs-lisp
  (setq r-autoyas-auto-expand-with-paren nil)
  (setq r-autoyas-expand-package-functions-only nil)
  (setq r-autoyas-ignored-functions (quote ("function" "for" "if" "cos" "sin" "exp" "tan" "cat" "print")))
  (setq r-autoyas-number-of-commas-before-return 1)
  (setq r-autoyas-save-expression-to-memory nil)
  
  (require 'r-autoyas)
#+end_src
*** Configure ido mode and use it everywhere
Use ido-mode everywhere and make it pretty.
#+srcname: configure-ido-mode
#+begin_src emacs-lisp
  (setq ido-decorations (quote ("
  ▬▶ " "" "
    * " "
    ..." "<" ">" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
  (ido-everywhere t)  
#+end_src

*** Configure tooltips
Tooltips can be useful, but only if they don't get in your way. The
default settings try to make sure that the tooltip doesn't cover your
text.

#+srcname: configure-tooltips
#+begin_src emacs-lisp
(setq tooltip-frame-parameters
      '((name . "tooltip")
	(left . 20)
	(top . 20)))
#+end_src

** Local LaTeX settings
*** In-text Smart Quotes (XeLaTeX only)
    Redefine TeX-open-quote and TeX-close-quote to be smart quotes by default. Below, in the local org-mode settings, we'll also map the relevant function to a key we can use in org-mode, too. If you don't use XeLaTeX for processing all your =.tex= files, you should disable this option.

#+source: smart-quotes
#+begin_src emacs-lisp :tangle no
  (setq TeX-open-quote "“")
  (setq TeX-close-quote "”")
#+end_src

*** Local RefTeX Settings
Tell RefTeX where the bibliography files are. 

#+srcname: local-reftex
#+begin_src emacs-lisp    
    ;; Make RefTex able to find my local bib files
    ;;(setq reftex-bibpath-environment-variables
    ';;("/Users/kjhealy/Library/texmf/bibtex/bib"))

    ;; Default bibliography
    (setq reftex-default-bibliography
    '("/home/izahn/Documents/References/References.bib"))


    ;; CDLaTex minor mode: tab-trigger environments, paired paren
    ;; insertion, etc
    ;; (autoload 'cdlatex-mode "cdlatex" "CDLaTeX Mode" t)
    ;; (autoload 'turn-on-cdlatex "cdlatex" "CDLaTeX Mode" nil)
    ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX
    ;;                                         ; mode

    ;; set which characters are autopaired // Doesn't work. Set in custom, below.
    ;; (add-hook 'cdlatex-mode-hook
    ;;   (function (lambda ()
    ;;               (setq cdlatex-paired-parens
    ;;                     '("$[{("))
    ;;             )))
#+end_src

*** Local vc commands
    Run the vc shellscript before running xelatex with C-c c (instead of
    C-c C-c for regular compile).

#+srcname: vc-command
#+begin_src emacs-lisp :tangle no
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex);; Run the VC command before running xelatex
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex)
#+end_src

    Or just run vc alone --- this is useful when writing LaTeX files
    using org-mode. (See the org-mode customizations below).

#+source: vc-alone
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c v")
                      (lambda ()
                        (interactive)
                        (shell-command "vc")))

#+end_src

** Local Pandoc Support 
 Make Emacs see where pandoc is installed. (Emacs can't access the bash
 $PATH directly.)
#+src-name: pandoc_mode
#+begin_src emacs-lisp
 ;;(setenv "PATH" (concat "/Users/kjhealy/.cabal/bin:" (getenv "PATH")))
 (load "pandoc-mode")
 (add-hook 'markdown-mode-hook 'turn-on-pandoc)
 (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src

** Local iBuffer Settings
   Manage a lot of buffers easily with C-x C-b. Already set up
   elsewhere in the starter kit. Add local configuration here, e.g.,
   display categories.
#+srcname: iBuffer-custom
#+begin_src emacs-lisp 
  (setq ibuffer-saved-filter-groups
      '(("home"
	 ("emacs-config" (or (filename . ".emacs.d")
			     (filename . "emacs-config")))
	 ("Org" (or (mode . org-mode)
		    (filename . "OrgMode")))
	 ("Web Dev" (or (mode . html-mode)
			(mode . css-mode)))
	 ("Magit" (name . "\*magit"))
	 ("ESS" (mode . ess-mode))
         ("LaTeX" (mode . latex-mode))
	 ("Help" (or (name . "\*Help\*")
		     (name . "\*Apropos\*")
		     (name . "\*info\*"))))))

        (add-hook 'ibuffer-mode-hook 
	             '(lambda ()
	             (ibuffer-switch-to-saved-filter-groups "home")))
       (setq ibuffer-show-empty-filter-groups nil)                     
       (setq ibuffer-expert t)
       (add-hook 'ibuffer-mode-hook 
       '(lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "home")))
#+end_src

** Local Org-mode Settings
*** Smart-quote binding
When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default. 

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'smart-quote-keys)
  
  (defun smart-quote-keys ()
    (require 'typopunct)
    (typopunct-change-language 'english)
    (local-set-key (kbd "C-c \'") 'typopunct-insert-single-quotation-mark)
    (local-set-key (kbd "C-c \"") 'typopunct-insert-quotation-mark)
    )
    
  
  
#+end_src

*** Archive Settings
    Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp
  (setq org-archive-location "~/Documents/Org/Archive.org::From %s")
#+end_src

*** Mobile Settings
   Sync orgmode files with Dropbox and iPhone. 
#+src-name: orgmode-mobile
#+begin_src emacs-lisp
   ;; Set to the location of your Org files on your local system
   (setq org-directory "~/Documents/Org")
   ;; Set to <your Dropbox root directory>/MobileOrg.
   ;;(setq org-mobile-directory "~/Dropbox/MobileOrg")
   ;; Set to the files (or directory of files) you want sync'd
   (setq org-agenda-files (quote ("~/Documents/Org")))
   ;; Set to the name of the file where new notes will be stored
   ;;(setq org-mobile-inbox-for-pull "~/Dropbox/Org/from-mobile.org")
#+end_src

*** Babel Settings
   Configure org-mode so that when you edit source code in an indirect buffer (with C-c '), the buffer is opened in the current window. That way, your window organization isn't broken when switching.

#+source: orgmode-indirect-buffer-settings
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

*** XeLaTeX and pdfLaTeX Export Settings
    Configure org-mode to export directly to PDF using pdflatex or
    xelatex, compiling the bibliography as it goes using latexmk. You
    may need to adjust or remove some of these settings depending on your
    preferences and local configuration. Note that for Beamer class
    you can use =#+MACRO: BEAMERMODE <mode.=, =#+MACRO: BEAMERTHEME
    <theme>=, =#+MACRO: BEAMERCOLORTHEME <colortheme>=, =#+MACRO:
    BEAMERSUBJECT <subject>= and =#+MACRO: BEAMERINSTITUTE
    <organization.= in your .org file to set these elements. Likewise,
    you can use =#+MACRO: SHORTTITLE <title>=,  =#+MACRO: AUTHORNOTE
    <author note>=, and =#+MACRO: ABSTRACT <abstract>= to set these
    elements when exporting to apa6e format. 

**** Source code handling
    First set up general source code handling options.
#+source: orgmode-latex-source-export
#+begin_src emacs-lisp
  (require 'org-latex)
  ;; Choose either listings or minted for exporting source code blocks.
  ;; Using minted (as here) requires pygments be installed. To use the
  ;; default listings package instead, use
  ;; (setq org-export-latex-listings t)
  ;; and change references to "minted" below to "listings"
  (setq org-export-latex-listings 'minted)
  
  ;; default settings for minted code blocks
  (setq org-export-latex-minted-options
        '(;("frame" "single")
                                          ;("bgcolor" "bg") ; if uncommented, bg will need to be defined in the preamble of your document.
          ("fontsize" "\\scriptsize")
          ))
  
  ;; Make sure minted knows about R source blocks
  (add-to-list 'org-export-latex-minted-langs
               '("R" "r"))
  
  ;; Set reasonable figure width
  (setq org-export-latex-image-defalut-option "width=\\textwidth")
#+end_src

**** LaTeX commands
    Set up latex commands using pdflatex of xelatex depending on the
    value of LATEX_CMD.
#+source: orgmode-latex-export-commands
#+begin_src emacs-lisp 
  ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
  ;; but adapted to use latexmk 4.22 or higher.
  (defun my-auto-tex-cmd ()
    "When exporting from .org with latex, automatically run latex,
                       pdflatex, or xelatex as appropriate, using latexmk."
    (let ((texcmd)))
    ;; default command: pdflatex
    (setq texcmd "latexmk -f -pdflatex='pdflatex --shell-escape' -pdf %f")
    ;; pdflatex -> .pdf
    (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
        (setq texcmd "latexmk -f -pdflatex='pdflatex --shell-escape' -pdf %f"))
    ;; xelatex -> .pdf
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
        (setq texcmd "latexmk -f -pdflatex='xelatex --shell-escape' -pdf %f"))
    ;; LaTeX compilation command
    (setq org-latex-to-pdf-process (list texcmd)))
  
  (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
#+end_src

**** Default packages
    Set up default packages that we will always load. This section is
    set up so that you can define different packages depending on the
    LATEX_CMD in use. Note that hyperref is not in this list and will
    need to be added in the latex-classes Alists below. 
#+source: orgmode-latex-default-packages
#+begin_src emacs-lisp
  ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
  (setq org-export-latex-packages-alist
        '(("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" )
          ("" "booktabs" )))
  
  ;; Custom packages
  (defun my-auto-tex-package-parameters ()
    "Automatically select the tex packages to include. See https://github.com/kjhealy/latex-custom-kjh for the support files included here."
    ;; default packages for ordinary latex or pdflatex export
    (setq org-export-latex-default-packages-alist
          '(("AUTO" "inputenc" t)
            ("" "minted" t)))
    ;; Packages to include when xelatex is used
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
        (setq org-export-latex-default-packages-alist
              '(("" "minted" t)))))
  
  (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-package-parameters)
#+end_src  

**** Class lists
     Defines the available class lists. Currently these include article,
     apa6e, apa6e-strict, and beamer. Note that hyperref must be
     loaded here! If you add classes, you must make sure to include hyperref. 
#+source: orgmode-latex-class-list
#+begin_src emacs-lisp
    ;; Clear any previously defined class list
    (setq org-export-latex-classes nil)
    ;; Set default classes list
    (add-to-list 'org-export-latex-classes
                 ;; Article class
                 '("article"
                   "\\documentclass[11pt,article,oneside]{memoir}
  \\usepackage{hyperref}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-export-latex-classes
                 ;; APA 6th edition class, figures and footnotes in text
                 '("apa6e"
                   "\\documentclass[leavefloats]{apa6e}
    \\usepackage{hyperref}
    \\abstract{{{{apa-abstract}}}}
    \\shorttitle{{{{shorttitle}}}}
    \\hypersetup{hidelinks}
    \\authornote{{{{authornote}}}}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-export-latex-classes
                 ;; APA 6th edition class, figures and footnotes at end
                 '("apa6e-strict"
                   "\\documentclass[leavefloats]{apa6e}
    \\hypersetup{hidelinks}
    \\shorttitle{{{{shorttitle}}}}
    \\authornote{{{{authornote}}}}
    \\abstract{{{{abstract}}}}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-export-latex-classes
                 ;; beamer class, for presentations
                 '("beamer"
                   "\\documentclass[11pt]{beamer}
          \\mode<{{{beamermode}}}>
          \\usetheme{{{{beamertheme}}}}
          \\usecolortheme{{{{beamercolortheme}}}}
          \\setbeameroption{show notes}
          \\usepackage{color}
          \\usepackage{hyperref}
          \\usepackage{verbatim}\n
          \\institute{{{{beamerinstitute}}}}
           \\subject{{{{beamersubject}}}}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\begin{frame}[fragile]\\frametitle{%s}"
                    "\\end{frame}"
                    "\\begin{frame}[fragile]\\frametitle{%s}"
                    "\\end{frame}")))
    
#+end_src

**** Special handling for APA classes
#+source: orgmode-latex-apa-class-handling
#+begin_src emacs-lisp
  ;; Don't print a table of contents for apa6e class.
  (defun org-export-latex-no-toc (depth)
    (when depth
      (format "%% Org-mode is exporting headings to %s levels.\n"
              depth)))
  
  (defun my-auto-tex-apa-toc-parameters ()
    (if (string-match "LATEX_CLASS: apa6e" (buffer-string))
        (setq org-export-latex-format-toc-function
              'org-export-latex-no-toc))
    (if (string-match "LATEX_CLASS: apa6e-strict" (buffer-string))
        (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)))
  (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-apa-toc-parameters)
#+end_src

*** ebib and citation settings
    ebib is a bibtex database manager that works inside emacs. It can
    talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details. 
#+source: ebib-setup
#+begin_src emacs-lisp
    (org-add-link-type "ebib" 'ebib)
  
   (org-add-link-type 
     "cite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "cite:" desc)))
               (format "\\cite{%s}" path)
               (format "\\cite[%s]{%s}" desc path)
               )))))
  
   (org-add-link-type 
     "parencite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "parencite:" desc)))
               (format "\\parencite{%s}" path)
               (format "\\parencite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
     "textcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "textcite:" desc)))
               (format "\\textcite{%s}" path)
               (format "\\textcite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
     "autocite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "autocite:" desc)))
               (format "\\autocite{%s}" path)
           (format "\\autocite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
     "headlessfullcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
               (format "\\headlessfullcite{%s}" path)
               (format "\\headlessfullcite[%s]{%s}" desc path)
  )))))   
#+end_src

*** HTML export Settings
Create =html= files form the =org= sources, to help with documentation. To set up org-mode for publishing projects to HTML you will need to change these settings, as they apply only to the Starter Kit. 

#+source: html-export-settings
#+begin_src emacs-lisp
  (setq org-publish-project-alist
         '(("org"
            :base-directory "~/.emacs.d/"
            :publishing-directory "~/Documents/Org/Publishing/"
            :auto-sitemap t
            :sitemap-filename "index.org"
            :sitemap-title "Se"
            :section-numbers t
            :table-of-contents nil
            :style "<link rel=\"stylesheet\"
                   href=\"http://kieranhealy.org/css/blueprint/org-screen.css\"
                   type=\"text/css\"/>")))
  
    (setq org-export-html-style-extra "<link rel=\"stylesheet\" href=\"http://kieranhealy.org/css/kjh-org-custom.css\" type=\"text/css\"><link rel=\"stylesheet\" href=\"http://kieranhealy.org/css/blueprint/print.css\" type=\"text/css\" media=\"print\"> <!--[if IE]><link rel=\"stylesheet\" href=\"http://kieranhealy.org/css/blueprint/ie.css\" type=\"text/css\" media=\"screen,projection\"><![endif]-->")    
  
#+end_src

** Minimal mode
   A nice clutter-free appearance with a reduced-size modeline, no
   scroll bars, and no fringe indicators. Useful in conjunction with running Emacs full-screen. 

#+source: minimal-mode
#+begin_src emacs-lisp
  (require 'minimal)
  (global-set-key (kbd "C-c s") 'minimal-mode)
#+end_src

** Auto-complete mode
   Powerful autocompletion; experimentally added. Will pop-up
   autocomplete suggestions as you type; hit =TAB= to complete, or
   choose from the menu of options.

#+source: auto-complete
#+begin_src emacs-lisp
  ;; compile it if the .el file is newer 
  (byte-recompile-directory "~/.emacs.d/src/auto-complete")
  (byte-recompile-directory "~/.emacs.d/src/auto-complete/dict/ess")
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/src/auto-complete/dict")
  (setq ac-modes (append ac-modes '(org-mode))) 
  (ac-config-default)
  (define-key ac-complete-mode-map [tab] 'ac-expand)
  (require 'ac-R)
  (setq ac-auto-start 3)
  (ac-flyspell-workaround)
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (setq ac-auto-show-menu 0.8)
  (setq ac-quick-help-delay 3)
  ;; consistent  with zenburnish theme
  (set-face-background 'ac-candidate-face "#366060")
  (set-face-background 'ac-selection-face "#8cd0d3")
  (set-face-foreground 'ac-selection-face "#1f1f1f")
  
#+end_src

** IRC
Sometimes useful for getting help on R or Emacs. 
#+source: rirc-configuration
#+begin_src emacs-lisp :tangle no
  ;; connect to irc on invocation but don't autojoin any channels
  (require 'rcirc)
  (add-to-list 'rcirc-server-alist
                       '("irc.freenode.net"))
#+end_src

** Local ESS settings
Configure automatic argument display and optionally use tooltip mode
#+srcname: local-ess-settings
#+begin_src emacs-lisp
  (setq ess-pdf-viewer-pref "okular")
  ;; (setq ess-r-args-electric-paren t) ;; using eldoc instead
  (setq ess-r-args-keep-silent nil)
  (setq ess-r-args-show-as (quote message)) ;tooltip would be nice,
  ;; but the default of message is much more practical
  
  ;; Use eldoc because that way the argument list does not disappear
  ;; when you press a key
  (require 'ess-eldoc)
  (add-hook 'inferior-ess-mode-hook 'ess-use-eldoc)
#+end_src

** Templates
#+source: configure-templates
#+begin_src emacs-lisp
  (require 'template)
  (template-initialize)
#+end_src

** Final Custom elements
Some local tweaks. Note the custom-file has been cleaned out in preparation for moving (almost) all settings to this file. A backup has been preserved in a [[file://~/.emacs.d/customBackup][backup file]]

#+srcname: final-custom
#+begin_src emacs-lisp
  ;; Line-spacing tweak (Optimized for DejaVu)
  (setq-default line-spacing 2)
  
  ;; minimize fringe
  (setq-default indicate-empty-lines nil)
  
  ;; Add keybindings for commenting regions of text
  (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)
  
  ;; Base dir
  (cd "~/")
  
  ;; Load custom-set-variables
  (setq custom-file "~/.emacs.d/custom.el")
  (load "~/.emacs.d/custom.el" t t)
#+end_src
   
   
   
   
   
   
