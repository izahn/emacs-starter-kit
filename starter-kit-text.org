#+TITLE: Starter Kit Text Editing
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]]. 

This file provides settings for text-editing modes and formats, including
Mardown and Pandoc, as well as spellchecking and line-wrapping.

* Text Management and Appearance
** Word-count
    Live word count in status bar, via wc. Unfortunately there seems
    to be a bug -- it interacts badly with the smooth scrolling: when
    you get to the bottom of the buffer it wraps the pointer up to the
    middle of the screen without moving the text with it, so you end
    up typing inside the text that's already there. As a result, it is
    turned off and has been replaced with a simpler version instead,
    which gives you a straight count via M-x wc.

#+srcname: word-count
#+begin_src emacs-lisp
    ;; (autoload 'word-count-mode "word-count"
    ;; "Minor mode to count words." t nil)
    ;; (dolist (hook '(org-mode-hook
    ;; markdown-mode-hook
    ;; TeX-mode-hook
    ;; text-mode-hook))
    ;; (add-hook hook (lambda () (word-count-mode 1))))

    (require 'wc)
#+end_src 

** Line wrapping and position
    Sane line wrapping and scrolling for long documents and
    papers. Plus a function for removing any hard-returns in a
    document. 
#+srcname: line-modes
#+begin_src emacs-lisp
    (global-visual-line-mode t)

    ;;; Turn off auto-fill in tex and markdown
    (add-hook 'markdown-mode-hook 'turn-off-auto-fill)
    (add-hook 'latex-mode-hook 'turn-off-auto-fill)

    ;;; unfill paragraph
    (defun unfill-paragraph ()
    (interactive)
    (let ((fill-column (point-max)))
    (fill-paragraph nil)))
    (global-set-key (kbd "<f6>") 'unfill-paragraph)

    ;; smooth-scrolling package in src/
    (require 'smooth-scrolling)

    ;; more smooth efforts.
    (setq-default 
    scroll-conservatively 0
    scroll-up-aggressively 0.01
    scroll-down-aggressively 0.01)
    
    ;; centered-cursor package in src/
    ;; (and
    ;;  (require 'centered-cursor-mode)
    ;;  (global-centered-cursor-mode +1)) 
#+end_src

** Spelling
#+srcname: spelling-mode-flyspell
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-flyspell)
#+end_src

** AutoPair Mode
    TextMate-like autopairing of quotes and parentheses. Trying out
    instead of Skeleton Mode. 
#+srcname: autopair
#+begin_src emacs-lisp 
  (require 'autopair)
  ;; (autopair-global-mode) ;; enable autopair in all buffers. 
 ;; (Ista:Ah hell naw! f-you autopair!)
  (setq autopair-autowrap t)
#+end_src

** Skeleton mode
   Turned off by default. Enable skeleton mode in ESS for paired insertion
#+srcname: skeleton-mode
#+begin_src emacs-lisp :tangle no
    (require 'skeleton)
    (setq skeleton-pair t)
    (defvar my-skeleton-pair-alist
    '((?\) . ?\()
    (?\] . ?\[)
    (?} . ?{)
    (?" . ?")))
    
    (defun my-skeleton-pair-end (arg)
    "Skip the char if it is an ending, otherwise insert it."
    (interactive "*p")
    (let ((char last-command-char))
    (if (and (assq char my-skeleton-pair-alist)
    (eq char (following-char)))
    (forward-char)
    (self-insert-command (prefix-numeric-value arg)))))

    (dolist (pair my-skeleton-pair-alist)
    (global-set-key (char-to-string (first pair))
    'my-skeleton-pair-end)
    ;; If the char for begin and end is the same,
    ;; use the original skeleton
    (global-set-key (char-to-string (rest pair))
    'skeleton-pair-insert-maybe))
#+end_src


** Markdown 
Markdown mode support. 

#+srcname: markdown-mode
#+begin_src emacs-lisp
   (autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
   (setq auto-mode-alist
   (cons '("\\.Markdown" . markdown-mode) auto-mode-alist)
   )
   (setq auto-mode-alist
   (cons '("\\.MarkDown" . markdown-mode) auto-mode-alist)
   )
   (setq auto-mode-alist
   (cons '("\\.markdown" . markdown-mode) auto-mode-alist)
   )
   (setq auto-mode-alist
   (cons '("\\.md" . markdown-mode) auto-mode-alist)
   )
#+end_src
